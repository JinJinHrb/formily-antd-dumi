import { LabeledValue } from 'antd/es/Select'

/*
https://pre.xtransfer.cn/api/v1/trade/customer/contact/list

request:
{
  "pageSize": 100,
  "pageNo": 1,
  "customerId": "19990100323000023010406154920"
}
*/

const MOCK_DATA_PENGPENG: any = {
	list: [
		{
			customerId: null,
			contactName: 'PengPeng',
			contactEmail: 'peng@123.com',
			contactPhone: [],
			contactFax: null,
			contactId: '19990100324000023010417008989',
			socialMediaModels: null,
			position: null,
			birthday: null,
			gender: null,
			remark: null,
		},
	],
	total: 1,
	pageNum: 1,
	pageSize: 100,
	pages: 1,
	hasPreviousPage: false,
	hasNextPage: false,
	firstPage: true,
	lastPage: true,
}

/*
https://pre.xtransfer.cn/api/v1/trade/customer/contact/list

request:
{
    "pageSize": 100,
    "pageNo": 1,
    "customerId": "19990100323000023010406151506"
}
*/
const MOCK_DATA_JASON: any = {
	list: [
		{
			customerId: null,
			contactName: 'kkkk9999',
			contactEmail: 'kkkk9999@qq.com',
			contactPhone: [],
			contactFax: null,
			contactId: '19990100324000023010917184379',
			socialMediaModels: null,
			position: null,
			birthday: null,
			gender: null,
			remark: null,
		},
		{
			customerId: null,
			contactName: 'kkk888',
			contactEmail: '18708123260@163.com',
			contactPhone: [],
			contactFax: null,
			contactId: '19990100324000023010517054303',
			socialMediaModels: null,
			position: null,
			birthday: null,
			gender: null,
			remark: null,
		},
	],
	total: 2,
	pageNum: 1,
	pageSize: 100,
	pages: 1,
	hasPreviousPage: false,
	hasNextPage: false,
	firstPage: true,
	lastPage: true,
}

// Generated by https://quicktype.io

export interface IContactResponse {
	list: IContactData[]
	total: number
	pageNum: number
	pageSize: number
	pages: number
	hasPreviousPage: boolean
	hasNextPage: boolean
	firstPage: boolean
	lastPage: boolean
}

export interface IContactData {
	customerId: null
	contactName: string
	contactEmail: string
	contactPhone: any[]
	contactFax: null
	contactId: string
	socialMediaModels: null
	position: null
	birthday: null
	gender: null
	remark: null
}

export const listContacts = (customerId: string): Promise<LabeledValue[]> => {
	let mockData: IContactData[] = []
	if (customerId === '19990100323000023010406154920') {
		mockData = MOCK_DATA_PENGPENG.list
	}
	if (customerId === '19990100323000023010406151506') {
		mockData = MOCK_DATA_JASON.list
	}
	const data: LabeledValue[] = mockData.map(el => {
		return {
			label: el.contactName,
			value: el.contactId,
		}
	})
	return new Promise(rsv => {
		setTimeout(() => {
			rsv(data)
		}, 1000)
	})
}
